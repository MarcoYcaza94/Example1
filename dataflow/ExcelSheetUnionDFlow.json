{
	"name": "ExcelSheetUnionDFlow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "VendorInputFile",
						"type": "DatasetReference"
					},
					"name": "vInfo"
				},
				{
					"dataset": {
						"referenceName": "VendorInputFile",
						"type": "DatasetReference"
					},
					"name": "cpu"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "salidaCPUINFO",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "origin"
				}
			],
			"scriptLines": [
				"source(output(",
				"          VM as string,",
				"          Powerstate as string,",
				"          Template as string,",
				"          CPUs as string,",
				"          Sockets as string,",
				"          {Cores p/s} as string,",
				"          Max as string,",
				"          Overall as string,",
				"          Level as string,",
				"          Shares as string,",
				"          Reservation as string,",
				"          Entitlement as string,",
				"          {DRS Entitlement} as string,",
				"          Limit as string,",
				"          {Hot Add} as string,",
				"          {Hot Remove} as string,",
				"          Annotation as string,",
				"          Datacenter as string,",
				"          Cluster as string,",
				"          Host as string,",
				"          Folder as string,",
				"          {OS according to the configuration file} as string,",
				"          {OS according to the VMware Tools} as string,",
				"          {VM ID} as string,",
				"          {VM UUID} as string,",
				"          {VI SDK Server} as string,",
				"          {VI SDK UUID} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'fileName') ~> vInfo",
				"source(output(",
				"          VM as string,",
				"          Powerstate as string,",
				"          Template as string,",
				"          CPUs as string,",
				"          Sockets as string,",
				"          {Cores p/s} as string,",
				"          Max as string,",
				"          Overall as string,",
				"          Level as string,",
				"          Shares as string,",
				"          Reservation as string,",
				"          Entitlement as string,",
				"          {DRS Entitlement} as string,",
				"          Limit as string,",
				"          {Hot Add} as string,",
				"          {Hot Remove} as string,",
				"          Annotation as string,",
				"          Datacenter as string,",
				"          Cluster as string,",
				"          Host as string,",
				"          Folder as string,",
				"          {OS according to the configuration file} as string,",
				"          {OS according to the VMware Tools} as string,",
				"          {VM ID} as string,",
				"          {VM UUID} as string,",
				"          {VI SDK Server} as string,",
				"          {VI SDK UUID} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> cpu",
				"vInfo, cpu join(vInfo@VM == cpu@VM,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     partitionBy('hash', 1),",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          VM = vInfo@VM,",
				"          Powerstate = vInfo@Powerstate,",
				"          CPUs = cpu@CPUs,",
				"          origin = fileName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(fileName = concat('volcado_desde_',origin)) ~> origin",
				"origin sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     rowUrlColumn:'fileName',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}